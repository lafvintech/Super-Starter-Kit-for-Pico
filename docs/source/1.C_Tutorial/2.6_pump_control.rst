2.6 Pump Control
=========================
Miniature centrifugal pumps are ideal for projects involving automated plant watering 
systems and can also be utilized to create small-scale smart water features. These pumps 
are powered by an electric motor, which operates in the same manner as a standard motor.

.. attention:: 
    
    1.Connect the tube to the motor outlet, submerge the pump in water, and then power it on.
    2.You need to make sure that the water level is always higher than the motor. Idling may damage the motor due to heat generation and will also generate noise.
    3.If you are watering plants, you need to avoid soil being drawn in, as this can clog the pump.
    4.If water does not come out of the tube, there may be residual water in the tube blocking the air flow and needs to be drained first.

Component List
^^^^^^^^^^^^^^^
- Raspberry Pi Pico W x1
- MicroUSB cable x1
- 830 Tie-Points Breadboard x1
- TA6586 x1
- DC Water Pump x1
- Resistor 10KΩ x1
- Li-po Charger Module x1
- Battery Holder x1
- Jumper Wire Several

Component knowledge
^^^^^^^^^^^^^^^^^^^^
:ref:`DC Water Pump <cpn_dc_water_pump>`
""""""""""""""""""""""""""""""""""""""""""

Schematic
^^^^^^^^^^
.. image:: img/2.sch/2.6.png

.. warning:: 

    * Since DC pump require a high current, we use a Li-po Charger module to power the motor here for safety reasons.

    * Make sure your Li-po Charger Module is connected as shown in the diagram. Otherwise, a short circuit will likely damage your battery and circuitry.

Connect
^^^^^^^^^
.. image:: img/3.connect/2.6.png

Code
^^^^^^^
.. note::

    * Open the ``2.6_pump_control.ino`` file under the path of ``Ultimate-Starter-Kit-for-Pico\Arduino\1.Project`` or copy this code into Thonny, then click "Run Current Script" or simply press F5 to run it.

    * Or copy this code into Arduino IDE.

    * Don’t forget to select the board(Raspberry Pi Pico) and the correct port before clicking the Upload button. 

.. image:: img/4.software/2.6.png

Click “Run current script”, After the code is run, the pump starts working and you will see water flowing out of the tube at the same time.

The following is the program code:

.. code-block:: c++

    const int motor1A = 14;
    const int motor2A = 15;
    const int switchPin = 16;

    bool pumpState = false;
    int lastSwitchState = HIGH; // HIGH indicates not pressed

    void setup() {
    pinMode(motor1A, OUTPUT);
    pinMode(motor2A, OUTPUT);
    pinMode(switchPin, INPUT_PULLUP);

    pumpOff(); // Initial state: Off
    }

    void loop() {
    int currentSwitchState = digitalRead(switchPin);

    // Detect the moment when the button changes from not pressed to pressed (falling edge)
    if (currentSwitchState == LOW && lastSwitchState == HIGH) {
        delay(20); // Debounce
        if (digitalRead(switchPin) == LOW) { // Confirm the button state again
        pumpState = !pumpState; // Toggle the state
        if (pumpState) {
            pumpOn();
            Serial.println("Power on");
        } else {
            pumpOff();
            Serial.println("Power off");
        }
        }
    }

    lastSwitchState = currentSwitchState;
    delay(50); // Add a delay to avoid excessive CPU usage
    }

    void pumpOn() {
    digitalWrite(motor1A, HIGH);
    digitalWrite(motor2A, LOW);
    }

    void pumpOff() {
    digitalWrite(motor1A, LOW);
    digitalWrite(motor2A, LOW);
    }

Phenomenon
^^^^^^^^^^^
.. video:: img/5.phenomenon/2.6.mp4
    :width: 100%