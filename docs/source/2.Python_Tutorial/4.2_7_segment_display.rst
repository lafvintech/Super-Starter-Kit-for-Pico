4.2 7-Segment Display
=========================
7 Segment Displays are ubiquitous in everyday life. For instance, they are used 
on air conditioners to display temperature and on traffic indicators to show countdown 
timers. Essentially, a 7 Segment Display is a package of 8 LEDs, with 7 strip-shaped 
LEDs forming an "8" shape and an additional smaller dot LED serving as a decimal 
point. These LEDs are labeled as a, b, c, d, e, f, g, and dp. 

They each have their own anode pins and share common cathodes. The pin layout is 
illustrated in the figure below.

.. image:: img/1.detail/4.2.png

This means that it needs to be controlled by 8 digital signals at the same time to fully work and the 74HC595 can do this.

Component List
^^^^^^^^^^^^^^^
- Raspberry Pi Pico W x1
- MicroUSB cable x1
- 830 Tie-Points Breadboard x1
- 7-segment Display x1
- Resistor 220Ω x1
- 74HC595 x1
- Jumper Wire Several

Component knowledge
^^^^^^^^^^^^^^^^^^^^
:ref:`7-segment Display <cpn_7-segment_display>`
"""""""""""""""""""""""""""""""""""""""""""""""""

Schematic
^^^^^^^^^^
.. image:: img/2.sch/4.2.png

The wiring principle here is largely the same as that of the 74HC595 described in 
Section 4.1, with the only difference being that the Q0-Q7 outputs are connected 
to the a to g pins of the 7 Segment Display.

Connect
^^^^^^^^^
.. image:: img/3.connect/4.2.png

Code
^^^^^^^
.. note::

    * Open the ``4.2_7_segment_display.py`` file under the path of ``Ultimate-Starter-Kit-for-Pico\Python\1.Project`` or copy this code into Thonny, then click "Run Current Script" or simply press F5 to run it.

    * Don't forget to click on the "MicroPython (Raspberry Pi Pico)" interpreter in the bottom right corner. 

.. image:: img/4.software/4.2.png

Click “Run current script”, you will be able to see the LED Segment Display display 0~9 in sequence.

The following is the program code:

.. code-block:: python

    import machine
    import time

    SEGCODE = [0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x07,0x7f,0x6f]

    sdi = machine.Pin(0,machine.Pin.OUT)
    rclk = machine.Pin(1,machine.Pin.OUT)
    srclk = machine.Pin(2,machine.Pin.OUT)

    def hc595_shift(dat):
        rclk.low()
        time.sleep_ms(5)
        for bit in range(7, -1, -1):
            srclk.low()
            time.sleep_ms(5)
            value = 1 & (dat >> bit)
            sdi.value(value)
            time.sleep_ms(5)
            srclk.high()
            time.sleep_ms(5)
        time.sleep_ms(5)
        rclk.high()
        time.sleep_ms(5)

    while True:
        for num in range(10):
            hc595_shift(SEGCODE[num])
            time.sleep_ms(500)


Phenomenon
^^^^^^^^^^^
.. video:: img/5.phenomenon/4.2.mp4
    :width: 100%