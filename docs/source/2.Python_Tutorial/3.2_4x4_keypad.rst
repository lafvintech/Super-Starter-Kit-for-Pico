3.2 4x4 Keypad
=========================
The 4x4 keyboard, often referred to as a matrix keyboard, consists of a grid of 16 
keys arranged in a single panel. This type of keypad is commonly found on devices 
that primarily require numeric input, such as calculators, TV remotes, push-button 
phones, vending machines, ATMs, combination locks, and digital door locks.

In this project, we will explore how to detect which key is pressed and retrieve 
the corresponding key value.

Component List
^^^^^^^^^^^^^^^
- Raspberry Pi Pico W x1
- MicroUSB cable x1
- 830 Tie-Points Breadboard x1
- Resistor 10KΩ x4
- 4x4 Keypad x1
- Jumper Wire Several

Component knowledge
^^^^^^^^^^^^^^^^^^^^
:ref:`4x4 Keypad <cpn_keypad>`
"""""""""""""""""""""""""""""""""""

Schematic
^^^^^^^^^^
.. image:: img/2.sch/3.2.png

Each column of the matrix keyboard is connected to a pull-down resistor, ensuring 
that G6 to G9 remain at a stable low level when no keys are pressed. The rows of 
the keyboard (G2 to G5) are programmed to output a high signal. If any of G6 to 
G9 is detected as high, it indicates that a specific key has been pressed.

For instance, if G6 is read as high, it means that the numeric key 1 has been 
pressed. This is because the control pins for numeric key 1 are G2 and G6. When 
key 1 is pressed, G2 and G6 are connected, causing G6 to go high.

Connect
^^^^^^^^^
.. image:: img/3.connect/3.2.png

To make the wiring easier, in the above diagram, the column row of the matrix keyboard and the 10K resistors are inserted into the holes where G6 ~ G9 are located at the same time.

Code
^^^^^^^
.. note::

    * Open the ``3.2_4x4_keypad.py`` file under the path of ``Ultimate-Starter-Kit-for-Pico\Python\1.Project`` or copy this code into Thonny, then click "Run Current Script" or simply press F5 to run it.

    * Don't forget to click on the "MicroPython (Raspberry Pi Pico)" interpreter in the bottom right corner. 

.. image:: img/4.software/3.2.png

Click “Run current script”, the Shell will print out the keys you pressed on the Keypad.

The following is the program code:

.. code-block:: python

    import machine
    import time

    characters = [["1","2","3","A"],["4","5","6","B"],["7","8","9","C"],["*","0","#","D"]]

    pin = [2,3,4,5]
    row = []
    for i in range(4):
        row.append(None)
        row[i] = machine.Pin(pin[i], machine.Pin.OUT)

    pin = [6,7,8,9]
    col = []
    for i in range(4):
        col.append(None)
        col[i] = machine.Pin(pin[i], machine.Pin.IN)

    def readKey():
        key = []
        for i in range(4):
            row[i].high()
            for j in range(4):
                if(col[j].value() == 1):
                    key.append(characters[i][j])
            row[i].low()
        if key == [] :
            return None
        else:
            return key

    last_key = None
    while True:
        current_key = readKey()
        if current_key == last_key:
            continue
        last_key = current_key
        if current_key != None:
            print(current_key)
        time.sleep(0.1)


Phenomenon
^^^^^^^^^^^
.. image:: img/5.phenomenon/3.2.png
    :width: 100%